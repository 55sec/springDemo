<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    <bean id="helloWorld" class="com.xyw55.springMVC.service.impl.HelloWorldService"/>
    <bean id="aspect" class="com.xyw55.springMVC.aop.HelloWorldAspect"/>
    <bean id="beforeAdvice" class="com.xyw55.springMVC.aop.BeforeAdviceImpl"/>
    <aop:config>
        <!--切入点-->
        <aop:pointcut id="pointcut" expression="execution(* com.xyw55.springMVC.controller.*.*(..))"/>
        <!--<aop:advisor advice-ref=""/>-->
        <aop:aspect ref="aspect">
            <!--切入点,一般给当前aspect使用-->
            <aop:pointcut id="inner_pointcut" expression="execution(* com.xyw55.springMVC.controller.*.*(..))"/>
            <!--通知-->
            <!--
                <aop:before pointcut="切入点表达式" pointcut-ref="切入点Bean引用"
                    method="前置通知实现方法名" arg-names="前置通知实现方法参数列表参数名字"/>
                    pointcut和pointcut-ref:二者选一,指定切入点;
                    method:指定前置通知实现方法名,如果是多态需要加上参数类型,多个用“,”隔开,如beforeAdvice(java.lang.String);
                    arg-names:指定通知实现方法的参数名字,多个用“,”分隔,可选,使用arg-names属性来指定参数名,如arg-names="param"表示通知实现方法的参数列表的第一个参数名字为 “param”
            -->
            <aop:before pointcut="execution(* com.xyw55.springMVC.service.*.sayBefore(..)) and args(param)"
                        method="beforeAdvice(java.lang.String)"
                        arg-names="param"/>
            <aop:before pointcut-ref="pointcut" method="beforeAdvice"/>
            <!--
                <aop:after-returning
                    pointcut="切入点表达式" pointcut-ref="切入点Bean引用"/>
                    method="后置返回通知实现方法名"
                    arg-names="后置返回通知实现方法参数列表参数名字"
                    returning="返回值对应的后置返回通知实现方法参数名"
                    returning:定义一个名字,该名字用于匹配通知实现方法的一个参数名,
                    当目标方法执行正常返回后,将把目标方法返回值传给通知方法;
                    returning限定了只有目标方法返回值匹配与通知方法相应参数类型时才能执行后置返回通知,否则不执行,对于returning对应的通知方法参数为Object类型将匹配任何目标返回值。
            -->
            <aop:after-returning method="afterReturnAdvice" pointcut="execution(* com.xyw55.springMVC.service.*.sayAfterReturn(..))" returning="param"/>

            <!--
                <aop:after-throwing pointcut="切入点表达式" pointcut-ref="切入点Bean引用"
                method="后置异常通知实现方法名"
                arg-names="后置异常通知实现方法参数列表参数名字"
                throwing="将抛出的异常赋值给的通知实现方法参数名"/>
                throwing:定义一个名字,该名字用于匹配通知实现方法的一个参数名,当目标方法抛出异常返回后,将把目标方法抛出的异常传给通知方法;
                throwing限定了只有目标方法抛出的异常匹配与通知方法相应参数异常类型时才能执行后置异常通知,否则不执行,对于throwing对应的通知方法参数为Throwable类型将匹配任何异常。
            -->
            <aop:after-throwing method="afterThrowAdvice"
                                pointcut="execution(* com.xyw55.springMVC..service.*.sayAfterExcept(..))"
                                throwing="param"/>

            <aop:after pointcut-ref="pointcut" method="afterFinallyAdvice"/>
            <!--匿名切入点Bean-->
            <aop:after pointcut="execution(* com.xyw55.springMVC.controller.*.*(..))" method="afterFinallyAdvice"/>

            <!--环绕通知:环绕着在切入点选择的连接点处的方法所执行的通知,环绕通知非常强大,可以决定目标方法是否执行,什么时候执行,执行时是否需要替换方法参数,执行完毕是否需要替换返回值,-->
            <aop:around method="aroundAdvice" pointcut="execution(* com.xyw55.springMVC.service.*.sayAround(..))"/>

            <!--引入
                 <aop:declare-parents
                    types-matching="AspectJ语法类型表达式"
                    implement-interface=引入的接口"
                    default-impl="引入接口的默认实现"
                    delegate-ref="引入接口的默认实现Bean引用"/>
                types-matching:匹配需要引入接口的目标对象的AspectJ语法类型表达式;
                implement-interface:定义需要引入的接口;
                default-impl和delegate-ref:定义引入接口的默认实现,二者选一,
                default-impl是接口的默认实现类全限定 名,而delegate-ref是默认的实现的委托Bean名;
            -->
            <aop:declare-parents types-matching="com.xyw55.springMVC.service.IHelloWorldService+"
                                 implement-interface="com.xyw55.springMVC.service.IIntroductionService"
                                 default-impl="com.xyw55.springMVC.service.impl.IntroductionService"/>

        </aop:aspect>

        <!--
            Advisor表示只有一个通知和一个切入点的切面,
            由于Spring AOP都是基于AOP联盟的拦截器模型的环绕通知的,所以 引入Advisor来支持各种通知类型(如前置通知等5种),
            Advisor概念来自于Spring1.2对AOP的支持,在AspectJ中没 有相应的概念对应。
            Advisor可以使用<aop:config>标签下的<aop:advisor>标签定义
        -->
        <!--<aop:advisor pointcut="execution(* com.xyw55.springMVC.service.IHelloWorldService.sayAdvisorBefore(..))" advice-ref="beforeAdvice" />-->
    </aop:config>
</beans>